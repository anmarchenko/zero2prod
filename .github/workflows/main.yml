name: Zero2prod in rust - main

on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.8.0
  SQLX_FEATURES: "rustls,postgres"
  APP_USER: app
  APP_USER_PWD: secret
  APP_DB_NAME: newsletter

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Service containers to run alongside the `test` container job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:14
        # Environment variables scoped only for the `postgres` element
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        # When you map ports using the ports keyword, GitHub uses the --publish command to publish the containerâ€™s ports
        # to the Docker host
        # Opens tcp port 5432 on the host and service container
        ports:
          - 6002:5432
    steps:
      - uses: actions/checkout@v4
      # This GitHub Action installs a Rust toolchain using rustup. It is designed for one-line concise usage and good defaults.
      # It also takes care of caching intermediate build artifacts.
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # DB migrations
      - name: Install sqlx-cli
        run: cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
      - name: Create app user in Postgres
        run: |
          sudo apt-get install postgresql-client

          # Create the application user
          CREATE_QUERY="CREATE USER ${APP_USER} WITH PASSWORD '${APP_USER_PWD}';"
          PGPASSWORD="postgres" psql -U "postgres" -h "localhost" -p 6002 -c "${CREATE_QUERY}"

          # Grant create db privileges to the app user
          GRANT_QUERY="ALTER USER ${APP_USER} CREATEDB;"
          PGPASSWORD="postgres" psql -U "postgres" -h "localhost" -p 6002 -c "${GRANT_QUERY}"
      - name: Migrate database
        run: ./scripts/init_db.sh

      - name: Run tests
        run: cargo test

      - name: Check that queries are fresh
        run: cargo sqlx prepare --workspace --check -- --all-targets

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      # This environment variable forces sqlx to use its offline mode,
      # which means that it will not attempt to connect to a database
      # when running the tests. It'll instead use the cached query results.
      # We check that the cached query results are up-to-date in another job,
      # to speed up the overall CI pipeline.
      # This will all be covered in detail in chapter 5.
      SQLX_OFFLINE: true
    steps:
      - uses: actions/checkout@v4
      - name: Install the Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
      - name: Linting
        run: cargo clippy -- -D warnings
